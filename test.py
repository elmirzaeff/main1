import time
import ccxt
import pandas as pd
import os
import pytz
import threading
import subprocess
from config import TELEGRAM_TOKEN_2, TARGET_TIMEZONE, CRYPTO_PAIR, TIMEFRAME, DATA_FILE, LOG_FILE
from logger import logger
from data_handler import save_data, load_data
from telegram_bot import bot, send_message
from exchange_utils import fetch_candles, calculate_sma, calculate_atr, check_crossing
from order_manager import place_order, place_tp_sl, exchange

# –î–µ–ª–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–∞–±–æ—á–µ–π
os.chdir(os.path.dirname(os.path.abspath(__file__)))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ID —á–∞—Ç–∞
chat_id = None
last_cross_time = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
last_entry_price = None  # –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤–≤–µ—Ä—Ö
atr_at_entry = None  # ATR –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def monitor_crypto():

    global chat_id, last_cross_time, last_entry_price, atr_at_entry

    # –ó–∞–≥—Ä—É–∂–∞–µ–º chat_id –∏–∑ config.py
    try:
        from config import CHAT_ID
        chat_id = CHAT_ID
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω chat_id –≤ test.py: {chat_id}")
    except ImportError:
        logger.error("‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ chat_id –≤ test.py")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    df = load_data()
    logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏
    if df.empty or len(df) < 200:
        df = fetch_candles(CRYPTO_PAIR, TIMEFRAME)
        df = calculate_atr(df)
        save_data(df)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∞—Ç!")
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    

    level_up_reached = False  # –§–ª–∞–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è +3ATR
    level_down_reached = False  # –§–ª–∞–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è -1ATR
    
    logger.info("üöÄ –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_data = fetch_candles(CRYPTO_PAIR, TIMEFRAME)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {new_data.tail(1)}")

            # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            df = pd.concat([df, new_data]).drop_duplicates(subset="timestamp").reset_index(drop=True)
            df = calculate_atr(df)
            save_data(df)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            crossings = check_crossing(df)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ: {len(crossings)}")

            if not crossings.empty:
                last_crossing = crossings.iloc[-1]
                cross_time = last_crossing["timestamp"]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
                if last_cross_time != cross_time:
                    last_cross_time = cross_time

                    if last_crossing["SMA_50"] > last_crossing["SMA_200"]:  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –í–í–ï–†–•
                        direction = "–í–≤–µ—Ä—Ö"
                        last_entry_price = last_crossing["close"]  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ü–µ–Ω—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                        atr_at_entry = last_crossing["ATR"]  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ATR –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞

                        logger.info(f"üî• –ù–æ–≤–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ! last_entry_price: {last_entry_price}, atr_at_entry: {atr_at_entry}")
                        
                        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É, TP, SL
                        try:
                            order = place_order(CRYPTO_PAIR, "buy", 10) 

                            if order:
                                try:
                                    entry_price = exchange.fetch_ticker(CRYPTO_PAIR)['last']  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                                    place_tp_sl(CRYPTO_PAIR, "buy", entry_price)
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞: {e}", exc_info=True)

                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}", exc_info=True)
                            order = None  # –ß—Ç–æ–±—ã –∫–æ–¥ –¥–∞–ª—å—à–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è

                    else:
                        continue  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–Ω–∏–∑ ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                    current_price = last_crossing["close"]
                    #previous_price = last_crossing["close"] if len(crossings) < 2 else crossings.iloc[-2]["close"]

                    message = (
                        f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!\n"
                        f"–ü–∞—Ä–∞: {CRYPTO_PAIR}\n"
                        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
                        f"–í—Ä–µ–º—è: {last_cross_time}\n"
                        #f"–ü—Ä–æ—à–ª–∞—è —Ü–µ–Ω–∞: {previous_price}\n"
                        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}\n"
                        f"3ATR: {(last_entry_price + 10 * atr_at_entry):.4f}\n"
                        f"-1ATR: {(last_entry_price - 3 * atr_at_entry):.4f}"
                    )
                    send_message(message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

            if last_entry_price is not None and atr_at_entry is not None:
                level_up = last_entry_price + 10 * atr_at_entry  # –£—Ä–æ–≤–µ–Ω—å 10ATR –≤–≤–µ—Ä—Ö
                level_down = last_entry_price - 3 * atr_at_entry   # –£—Ä–æ–≤–µ–Ω—å -3ATR –≤–Ω–∏–∑
                current_price = df.iloc[-1]["close"]  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞

                logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}, 10ATR: {level_up}, -3ATR: {level_down}")

                if current_price >= level_up:
                    achievement_price = level_up  # –§–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    achievement_time = df.iloc[-1]["timestamp"]  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å +10ATR! –¶–µ–Ω–∞: {current_price}, —É—Ä–æ–≤–µ–Ω—å: {level_up}")
                    send_message(
                        f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ +10ATR!\n"
                        f"–¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {achievement_price:.4f}\n"
                        f"–í—Ä–µ–º—è: {achievement_time}"
                        )
                    last_entry_price = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                    atr_at_entry = None

                elif current_price <= level_down:
                    achievement_price = level_down  # –§–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–Ω—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    achievement_time = df.iloc[-1]["timestamp"]  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    logger.info(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å -3ATR! –¶–µ–Ω–∞: {current_price}, —É—Ä–æ–≤–µ–Ω—å: {level_down}")
                    send_message(
                        f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ -3ATR!\n"
                        f"–¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {achievement_price:.4f}\n"
                        f"–í—Ä–µ–º—è: {achievement_time}"
                        )
                    last_entry_price = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                    atr_at_entry = None

            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
            time.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import threading
    threading.Thread(target=monitor_crypto).start()

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=monitor_crypto, daemon=True).start()

# –ó–∞–ø—É—Å–∫–∞–µ–º telegram_bot.py –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
subprocess.Popen(["python", "telegram_bot.py"])

logger.info("–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å test.py –∑–∞–ø—É—â–µ–Ω.")